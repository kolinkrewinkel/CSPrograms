------------------------------------
--           Preparation          --
------------------------------------

local args = { ... } -- Grab the user's arguments
local width = args[1]
local height = args[2]
local halfBlock = args[3]

if (width == nil) or (height == nil) then -- The user didn't supply all the info required.
	print("Usage: platform <width> <height> [half block]. In game, place a chest below the starting of your turtle, with the blocks you want used for the platform. Then, place a chest above it with the blocks you want used for the first level of the walls (this is like a brace for the turtle.) The maximum size of the area cannot allow the perimeter to exceed 944 blocks. Optionally, use this command to specify if the turtle needs to \"double place\" the blocks (slabs) - defaults to no.") -- Give directions
	return
end

if (halfBlock == nil) then
	halfBlock = false -- Assume they're whole blocks
end

turtle.select(1)
turtle.refuel() -- Reset and refuel

------------------------------------
--            Utilities           --
------------------------------------

function math.even(n)
    return n % 2 == 0
end

function handleInventory()
	if (turtle.getItemCount(selectedSlot) == 0) then
		if (selectedSlot < 16) then
			selectedSlot = selectedSlot + 1
		else
			while (turtle.suckDown() == false) do
				repeat
					turtle.forward()
				until turtle.detect()

				turtle.turnRight()
			end
		end
	end
end

------------------------------------
--            Bordering           --
------------------------------------

function borderArea()
	while(turtle.suckUp() == true) do end -- Grab wall blocks from chest above.

	local borderIndex = 0
	local selectedSlot = 1

	repeat -- until all sides are done

		local remainder = height - 1 -- amount of blocks yet to be traversed

		if (borderIndex == 2) or (borderIndex == 4) then -- change conditionally for the other axis
			remainder = width - 1
		end

		local initial = remainder
		
		repeat
			-- check that there are enough blocks left
			if (turtle.getItemCount(selectedSlot) == 1) then -- keep the inventory "full"
				if (selectedSlot < 16) then
					selectedSlot = selectedSlot + 1
				else 
					print("Critical error. Current slot exceeded maximum allowed value.")
					return
				end
			end

			if (remainder ~= initial) or (borderIndex == 0) then -- the first time it's placed, it's not running up to the new prospective wall, thus it still needs to turn.
				turtle.turnLeft() -- Look left
			else
				turtle.turnLeft()
				turtle.dig()
				turtle.place()
				turtle.turnRight()
			end

			turtle.select(selectedSlot) -- Select the potentially updated slot
			
			-- if (turtle.detect()) then
				turtle.dig() -- Dig out anything in the way
			-- end

			turtle.place() -- place
			turtle.turnRight() -- Return to forward facing
			turtle.forward() -- Move onwards

			remainder = remainder - 1 -- decrement and continue

		until remainder == 0

		borderIndex = borderIndex + 1 -- Turn right and continue onwards, starting the loop section over again

	until borderIndex == 4

	selectedSlot = 1 -- Reset for the dropoff
	repeat
		turtle.select(selectedSlot)
		turtle.dropUp()
		selectedSlot = selectedSlot + 1
	until selectedSlot == 16

	turtle.turnRight()
end

------------------------------------
--             Placing            --
------------------------------------

function place()

	selectedSlot = 1
	turtle.select(selectedSlot)

	repeat
		turtle.suckDown()
		selectedSlot = selectedSlot + 1
	until selectedSlot == 16

	selectedSlot = 1
	turtle.select(selectedSlot)

	local xIndex = 0

	repeat
		local yIndex = 0
		repeat
			handleInventory()

			turtle.select(selectedSlot)

			turtle.placeDown()
			turtle.forward()

			yIndex = yIndex + 1
		until yIndex == height - 1

		if (math.even(xIndex)) then
			handleInventory()
			turtle.placeDown()
			turtle.turnRight()
			turtle.forward()
			handleInventory()
			turtle.placeDown()
			turtle.turnRight()
		else
			handleInventory()
			turtle.placeDown()
			turtle.turnLeft()
			turtle.forward()
			handleInventory()
			turtle.placeDown()
			turtle.turnLeft()
		end

		xIndex = xIndex + 1
	until xIndex == width - 1
end

------------------------------------
--              Main              --
------------------------------------

function main()
	borderArea()
	place()

	print("Completed platform.")
end

main()
